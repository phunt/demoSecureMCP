# Production Docker Compose configuration with secrets
# Usage: docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # MCP FastAPI Server with production settings
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.prod  # Use production Dockerfile with Gunicorn
    environment:
      # Non-sensitive configuration can stay as environment variables
      - APP_NAME=demoSecureMCP
      - APP_VERSION=0.1.0
      - DEBUG=false
      - LOG_LEVEL=INFO
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=4  # Adjust based on CPU cores
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=mcp-realm
      - KEYCLOAK_CLIENT_ID=mcp-server
      - OAUTH_ISSUER=https://auth.example.com/realms/mcp-realm  # Use production URL
      - OAUTH_AUDIENCE=mcp-server
      - OAUTH_JWKS_URI=http://keycloak:8080/realms/mcp-realm/protocol/openid-connect/certs
      - OAUTH_TOKEN_INTROSPECTION_ENDPOINT=http://keycloak:8080/realms/mcp-realm/protocol/openid-connect/token/introspect
      - MCP_RESOURCE_IDENTIFIER=https://api.example.com
      - MCP_SUPPORTED_SCOPES=mcp:read,mcp:write,mcp:infer
      - REDIS_URL=redis://redis:6379/0
      - REDIS_TTL=3600
      - CORS_ORIGINS=https://app.example.com,https://admin.example.com
      - REQUIRE_HTTPS=true
      - HSTS_MAX_AGE=31536000
      - JWT_ALGORITHMS=RS256,RS384,RS512
      - JWT_LEEWAY=10
      - LOG_FORMAT=json
    secrets:
      - keycloak_client_secret
    # Override command to read secret from file
    command: >
      sh -c "
        export KEYCLOAK_CLIENT_SECRET=$$(cat /run/secrets/keycloak_client_secret) &&
        gunicorn src.app.main:app -c gunicorn.conf.py
      "
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Production Nginx configuration
  nginx:
    volumes:
      - ./nginx/conf.d/mcp-server.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl/production:/etc/nginx/ssl:ro  # Production certificates
      - nginx_logs:/var/log/nginx
      - certbot_webroot:/var/www/certbot:ro  # For Let's Encrypt
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Certbot for Let's Encrypt SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: mcp-certbot
    volumes:
      - ./nginx/ssl/production:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    # Run certbot in standalone mode for initial certificate
    # After initial cert, use: certbot renew
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  # PostgreSQL with production settings
  postgres:
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Keycloak with production settings
  keycloak:
    environment:
      KC_DB_PASSWORD_FILE: /run/secrets/postgres_password
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD_FILE: /run/secrets/keycloak_admin_password
      KC_HOSTNAME: auth.example.com
      KC_HOSTNAME_STRICT: true
      KC_HOSTNAME_STRICT_HTTPS: true
      KC_PROXY: edge  # Behind reverse proxy
      KC_HTTP_ENABLED: true  # Still listen on HTTP internally
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/server.crt.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/server.key.pem
    command:
      - start  # Use 'start' instead of 'start-dev' for production
      - --optimized
      - --import-realm
    secrets:
      - postgres_password
      - keycloak_admin_password
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # Redis with production settings
  redis:
    command: redis-server --appendonly yes --requirepass-file /run/secrets/redis_password
    secrets:
      - redis_password
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

# Define secrets
secrets:
  keycloak_client_secret:
    file: ./secrets/keycloak_client_secret.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  keycloak_admin_password:
    file: ./secrets/keycloak_admin_password.txt
  redis_password:
    file: ./secrets/redis_password.txt

# Additional volumes for production
volumes:
  certbot_webroot: 