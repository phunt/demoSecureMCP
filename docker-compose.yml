services:
  # PostgreSQL Database for Keycloak
  postgres:
    image: postgres:17-alpine
    container_name: mcp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    container_name: mcp-keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin_password
      KC_LOG_LEVEL: INFO
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
      - keycloak_data:/opt/keycloak/data
    ports:
      - "8080:8080"
      - "9000:9000"  # Management port for health checks
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis for JWKS caching
  redis:
    image: redis:7.4-alpine
    container_name: mcp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MCP FastAPI Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      # Explicitly mark as container environment
      - CONTAINER_ENV=true
      
      # Application settings
      - APP_NAME=${APP_NAME:-demoSecureMCP}
      - APP_VERSION=${APP_VERSION:-0.1.0}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Server configuration
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=${WORKERS:-1}
      
      # External URLs (for reference and OAuth issuer)
      - EXTERNAL_BASE_URL=${EXTERNAL_BASE_URL:-https://localhost}
      - EXTERNAL_KEYCLOAK_URL=${EXTERNAL_KEYCLOAK_URL:-http://localhost:8080}
      
      # Internal URLs (for container communication)
      - INTERNAL_MCP_URL=http://mcp-server:8000
      - INTERNAL_KEYCLOAK_URL=http://keycloak:8080
      - INTERNAL_REDIS_URL=redis://redis:6379/0
      
      # Note: PUBLIC_* URLs are optional and only set in production
      
      # Keycloak configuration
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-mcp-realm}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-mcp-server}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-mcp-server-secret-change-in-production}
      
      # DCR configuration
      - USE_DCR=${USE_DCR:-false}
      - DCR_INITIAL_ACCESS_TOKEN=${DCR_INITIAL_ACCESS_TOKEN:-}
      
      # OAuth configuration (issuer must match tokens)
      - OAUTH_ISSUER=${OAUTH_ISSUER:-http://localhost:8080/realms/mcp-realm}
      - OAUTH_AUDIENCE=${OAUTH_AUDIENCE:-mcp-server}
      - JWT_ALGORITHMS=${JWT_ALGORITHMS:-RS256,RS384,RS512}
      - JWT_LEEWAY=${JWT_LEEWAY:-10}
      
      # MCP configuration
      - MCP_RESOURCE_IDENTIFIER=${MCP_RESOURCE_IDENTIFIER:-https://mcp-server.example.com}
      - MCP_SUPPORTED_SCOPES=${MCP_SUPPORTED_SCOPES:-mcp:read,mcp:write,mcp:infer}
      
      # Redis configuration
      - REDIS_TTL=${REDIS_TTL:-3600}
      
      # Security settings
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - REQUIRE_HTTPS=${REQUIRE_HTTPS:-true}
      - HSTS_MAX_AGE=${HSTS_MAX_AGE:-31536000}
      
    volumes:
      - ./src:/app/src:ro  # Mount source code for development
      - mcp_logs:/app/logs
    depends_on:
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.29-alpine
    container_name: mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      mcp-server:
        condition: service_healthy
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--no-check-certificate", "https://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: mcp_bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  keycloak_data:
    driver: local
  nginx_logs:
    driver: local
  mcp_logs:
    driver: local 